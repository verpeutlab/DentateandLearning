# -*- coding: utf-8 -*-
"""DCN photometry data

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1clTFYURM2PDNr6OFyBpE-1HWdrV4kx3e
"""

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)

"""## Plot Gi AUC"""

# Import necessary libraries
import gspread
from google.auth import default
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import auc
from scipy.stats import ks_2samp, ttest_ind

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Authenticate and connect to Google Sheets
creds, _ = default()
gc = gspread.authorize(creds)

# Load data from the Google Sheet
worksheet = gc.open('GCaMP2').worksheet("Sheet1")
data = worksheet.get_all_values()

# Create a DataFrame from the data
df = pd.DataFrame(data[1:], columns=data[0])  # Use the first row as the header

# Convert the relevant columns to numeric, coercing errors to NaN
df['zscore_Gcamp_Corrected_baseline'] = pd.to_numeric(df['zscore_Gcamp_Corrected_baseline'], errors='coerce')
df['zscore_Gcamp_Corrected_CNOchallenge'] = pd.to_numeric(df['zscore_Gcamp_Corrected_CNOchallenge'], errors='coerce')

# Drop rows with NaN values in the relevant columns
df = df.dropna(subset=['zscore_Gcamp_Corrected_baseline', 'zscore_Gcamp_Corrected_CNOchallenge'])

# Filter the data for 'Gi' group
df_gi = df[df['Group'] == 'Gi']

# Check if there is data left after filtering
if df_gi.empty:
    print("No data available for the group after cleaning.")
else:
    # Perform Kolmogorov–Smirnov test
    ks_stat, ks_pvalue = ks_2samp(df_gi['zscore_Gcamp_Corrected_baseline'], df_gi['zscore_Gcamp_Corrected_CNOchallenge'])
    print(f'KS Test: Statistic={ks_stat}, p-value={ks_pvalue}')

    # Calculate the AUC for baseline and CNO challenge
    x = range(len(df_gi))
    y_baseline = df_gi['zscore_Gcamp_Corrected_baseline']
    y_CNOchallenge = df_gi['zscore_Gcamp_Corrected_CNOchallenge']

    auc_baseline = auc(x, y_baseline)
    auc_CNOchallenge = auc(x, y_CNOchallenge)

    # Perform t-test on the AUC data
    t_stat, t_pvalue = ttest_ind(y_baseline, y_CNOchallenge)
    print(f'T-Test: Statistic={t_stat}, p-value={t_pvalue}')

    # Create a bar plot for AUC comparison
    plt.figure(figsize=(10, 6))
    plt.bar(['Baseline', 'CNO Challenge'], [auc_baseline, auc_CNOchallenge], color=['purple', 'purple'])
    plt.ylim(0,400000)
    plt.grid(False)
    plt.ylabel('AUC (z-score)')
    plt.title('AUC Comparison for Gi Group')
     # Remove top and right spines
    ax = plt.gca()
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    images_dir = '/content/drive/My Drive/Lab_Projects/DCNperturbation_Lyle' #file save path
    #plt.savefig(f"{images_dir}/GiAUC.pdf",bbox_inches='tight') #name the figure and save as pdf
    plt.savefig(f"{images_dir}/GiAUC_rev2.pdf",bbox_inches='tight') #name the figure and save as pdf

"""## Plot Gq AUC"""

# Import necessary libraries
import gspread
from google.auth import default
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import auc
from scipy.stats import ks_2samp, ttest_ind
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Authenticate and connect to Google Sheets
creds, _ = default()
gc = gspread.authorize(creds)

# Load data from the Google Sheet
worksheet = gc.open('GCaMP2').worksheet("Sheet1")
data = worksheet.get_all_values()

# Create a DataFrame from the data
df = pd.DataFrame(data[1:], columns=data[0])  # Use the first row as the header

# Convert the relevant columns to numeric, coercing errors to NaN
df['zscore_Gcamp_Corrected_baseline'] = pd.to_numeric(df['zscore_Gcamp_Corrected_baseline'], errors='coerce')
df['zscore_Gcamp_Corrected_CNOchallenge'] = pd.to_numeric(df['zscore_Gcamp_Corrected_CNOchallenge'], errors='coerce')

# Drop rows with NaN values in the relevant columns
df = df.dropna(subset=['zscore_Gcamp_Corrected_baseline', 'zscore_Gcamp_Corrected_CNOchallenge'])

# Filter the data for 'Gq' group
df_gq = df[df['Group'] == 'Gq']

# Check if there is data left after filtering
if df_gq.empty:
    print("No data available for the group after cleaning.")
else:
    # Perform Kolmogorov–Smirnov test
    ks_stat, ks_pvalue = ks_2samp(df_gq['zscore_Gcamp_Corrected_baseline'], df_gq['zscore_Gcamp_Corrected_CNOchallenge'])
    print(f'KS Test: Statistic={ks_stat}, p-value={ks_pvalue}')

    # Calculate the AUC for baseline and CNO challenge
    x = range(len(df_gq))
    y_baseline = df_gq['zscore_Gcamp_Corrected_baseline']
    y_CNOchallenge = df_gq['zscore_Gcamp_Corrected_CNOchallenge']

    auc_baseline = auc(x, y_baseline)
    auc_CNOchallenge = auc(x, y_CNOchallenge)

    # Perform t-test on the AUC data
    t_stat, t_pvalue = ttest_ind(y_baseline, y_CNOchallenge)
    print(f'T-Test: Statistic={t_stat}, p-value={t_pvalue}')

    # Create a bar plot for AUC comparison
    plt.figure(figsize=(10, 6))
    plt.bar(['Baseline', 'CNO Challenge'], [auc_baseline, auc_CNOchallenge], color=['green', 'green'])
    plt.ylim(0,400000)
    plt.grid(False)
    plt.ylabel('AUC (z-score)')
    plt.title('AUC Comparison for Gq Group')
     # Remove top and right spines
    ax = plt.gca()
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)

    images_dir = '/content/drive/My Drive/Lab_Projects/DCNperturbation_Lyle' #file save path
    #plt.savefig(f"{images_dir}/GqAUC.pdf",bbox_inches='tight') #name the figure and save as pdf
    plt.savefig(f"{images_dir}/GqAUC_rev2.pdf",bbox_inches='tight') #name the figure and save as pdf

"""### Plot ratio"""

# Import necessary libraries
import gspread
from google.auth import default
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.metrics import auc
from scipy.stats import ks_2samp, ttest_ind
import matplotlib.pyplot as plt
plt.style.use('seaborn-whitegrid')

plt.rcParams['pdf.fonttype'] = 42 #to work with in illustrator
plt.rcParams['ps.fonttype'] = 42 #to work with in illustrator

# Authenticate and connect to Google Sheets
creds, _ = default()
gc = gspread.authorize(creds)

# Load data from the Google Sheet
worksheet = gc.open('GCaMP2').worksheet("Sheet1")
data = worksheet.get_all_values()

# Create a DataFrame from the data
df = pd.DataFrame(data[1:], columns=data[0])  # Use the first row as the header

# Convert the relevant columns to numeric, coercing errors to NaN
df['Ratio_CNO_over_Baseline'] = pd.to_numeric(df['Ratio_CNO_over_Baseline'], errors='coerce')

# Drop rows with NaN values in the relevant columns
df = df.dropna(subset=['Ratio_CNO_over_Baseline'])

group_order = ['Gq', 'Gi']

plt.figure(figsize=(8, 6))  # Optional: Adjust figure size
plt.boxplot(
    [df[df['Group'] == group]['Ratio_CNO_over_Baseline'] for group in group_order],
    showfliers=False,
    labels=group_order
)
plt.title('Boxplot of Ratio CNO over Baseline by Group')
plt.xlabel('Group')
plt.ylabel('Ratio CNO over Baseline')
plt.grid(False)

     # Remove top and right spines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
plt.ylim(0,.6) #cno control at -8

# Plot a dotted line for the 'Control' group mean
control_data = df[df['Group'] == 'Control']['Ratio_CNO_over_Baseline']
if not control_data.empty:
  control_mean = control_data.mean()
  ax.axhline(control_mean, linestyle='--', color='grey', label='Control Mean')

#images_dir = '/content/drive/My Drive/Lab_Projects/DCNperturbation_Lyle' #file save path
plt.savefig(f"{images_dir}/ratio_rev2.pdf",bbox_inches='tight') #name the figure and save as pdf